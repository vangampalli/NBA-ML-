# -*- coding: utf-8 -*-
"""nba new model 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IQtDD_qDCDV6AWiPchr_oJlL9fN2nAvT
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd 
from sklearn import metrics
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

df_s=pd.read_csv('/content/drive/MyDrive/wiley edge final project/seasons_00_19.csv')

df_s['home_win']= df_s['HOME_PTS'] > df_s['VISITOR_PTS']

team_abb = {
"ATLANTA HAWKS" : "ATL",
"ST. LOUIS HAWKS" : "SLH",
"MILWAUKEE HAWKS" : "MIL",
"TRI-CITIES BLACKHAWKS" : "TCB",
"BOSTON CELTICS" : "BOS",
"BROOKLYN NETS" : "BRK",
"NEW JERSEY NETS" : "NJN",
"CHICAGO BULLS" : "CHI",
"CHARLOTTE HORNETS": "CHH",
"CHARLOTTE BOBCATS" : "CHA",
"CLEVELAND CAVALIERS" : "CLE",
"DALLAS MAVERICKS" : "DAL",
"DENVER NUGGETS" : "DEN",
"DETROIT PISTONS" : "DET",
"FORT WAYNE PISTONS" : "FWP",
"GOLDEN STATE WARRIORS" : "GSW",
"SAN FRANCISCO WARRIORS" : "SFW",
"PHILADELPHIA WARRIORS" : "PHI",
"HOUSTON ROCKETS" : "HOU",
"INDIANA PACERS" : "IND",
"LOS ANGELES CLIPPERS" : "LAC",
"SAN DIEGO CLIPPERS" : "SDC",
"BUFFALO BRAVES" : "BUF",
"LOS ANGELES LAKERS" : "LAL",
"MINNEAPOLIS LAKERS" : "MIN",
"MEMPHIS GRIZZLIES" : "MEM",
"VANCOUVER GRIZZLIES" : "VAN",
"MIAMI HEAT" : "MIA",
"MILWAUKEE BUCKS" : "MIL",
"MINNESOTA TIMBERWOLVES" : "MIN",
"NEW ORLEANS PELICANS" : "NOP",
"NEW ORLEANS/OKLAHOMA CITY HORNETS" : "NOK",
"NEW ORLEANS HORNETS" : "NOH",
"NEW YORK KNICKS" : "NYK",
"OKLAHOMA CITY THUNDER" : "OKC",
"SEATTLE SUPERSONICS" : "SEA",
"ORLANDO MAGIC" : "ORL",
"PHILADELPHIA 76ERS" : "PHI",
"SYRACUSE NATIONALS" : "SYR",
"PHOENIX SUNS" : "PHO",
"PORTLAND TRAIL BLAZERS" : "POR",
"SACRAMENTO KINGS" : "SAC",
"KANSAS CITY KINGS" : "KCK",
"KANSAS CITY-OMAHA KINGS" : "KCK",
"CINCINNATI ROYALS" : "CIN",
"ROCHESTER ROYALS" : "ROR",
"SAN ANTONIO SPURS" : "SAS",
"TORONTO RAPTORS" : "TOR",
"UTAH JAZZ" : "UTA",
"NEW ORLEANS JAZZ" : "NOJ",
"WASHINGTON WIZARDS" : "WAS",
"WASHINGTON BULLETS" : "WAS",
"CAPITAL BULLETS" : "CAP",
"BALTIMORE BULLETS" : "BAL",
"CHICAGO ZEPHYRS" : "CHI",
"CHICAGO PACKERS" : "CHI",
"ANDERSON PACKERS" : "AND",
"CHICAGO STAGS" : "CHI",
"INDIANAPOLIS OLYMPIANS" : "IND",
"SHEBOYGAN RED SKINS" : "SRS",
"ST. LOUIS BOMBERS" : "SLB",
"WASHINGTON CAPITOLS" : "WAS",
"WATERLOO HAWKS" : "WAT",
"SAN DIEGO ROCKETS" : "SDR"
}

df_s['VISITOR']=df_s['VISITOR'].str.upper()
df_s['HOME']=df_s['HOME'].str.upper()
df_s.replace({"VISITOR": team_abb},inplace=True)
df_s.replace({"HOME": team_abb},inplace=True)
df_s['GAMEID']=df_s['DATE'].str.replace('-','')+df_s['HOME']+df_s['VISITOR']
df_s

df_elo=pd.read_csv('/content/elo.csv')
df_s=df_s.merge(df_elo, how="left",on="GAMEID")
df_s

df_p=pd.read_csv('/content/drive/MyDrive/wiley edge final project/players_00_19.csv')

df_new=df_p.merge(df_s, how="left",on="GAMEID")
df_1=df_new[['GAMEID','DATE','PLAYER','HOME','VISITOR','home_win','HOME_ELO', 'AWAY_ELO' ]]
df_2=df_1.dropna()
df_2

"""## label encoding"""

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(df_2['PLAYER'])
df_2['PLAYER']=le.transform(df_2['PLAYER'])
le.fit(df_2['HOME'])
df_2['HOME_n']=le.transform(df_2['HOME'])
df_2['VISITOR_n']=le.transform(df_2['VISITOR'])
df_2["home_win"] = df_2["home_win"].astype(int)
df_2

df3=df_2[['GAMEID', 'PLAYER', 'home_win', 'HOME_ELO',
       'AWAY_ELO', 'HOME_n', 'VISITOR_n']]
df3=df3.reset_index(drop=True)    
df3

"""## feature engineering """

y = df3['home_win']
X = df3.drop(['home_win','GAMEID'], axis = 1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=13)
X_train=X_train.join(X_train.groupby('PLAYER')['HOME_ELO'].sum(), on="PLAYER", rsuffix='_sum')
X_train=X_train.join(X_train.groupby('PLAYER')['HOME_ELO'].mean(), on="PLAYER", rsuffix='_mean')
X_test=X_test.join(X_test.groupby('PLAYER')['HOME_ELO'].sum(), on="PLAYER", rsuffix='_sum')
X_test=X_test.join(X_test.groupby('PLAYER')['HOME_ELO'].mean(), on="PLAYER", rsuffix='_mean')

"""# modeling

LOG REG
"""

from sklearn.linear_model import LogisticRegression
logisticRegr = LogisticRegression()
logisticRegr.fit(X_train, y_train)
predictions = logisticRegr.predict(X_test)
score = logisticRegr.score(X_test, y_test)
print(score)

"""KNN MODEL"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=20)

knn = knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

# from sklearn.model_selection import GridSearchCV

# #List Hyperparameters that we want to tune.
# leaf_size = list(range(1))
# n_neighbors = list(range(1,100))
# p=[1]
# #Convert to dictionary
# hyperparameters = dict(leaf_size=leaf_size, n_neighbors=n_neighbors, p=p)
# #Create new KNN object
# knn_2 = KNeighborsClassifier()
# #Use GridSearch
# clf = GridSearchCV(knn_2, hyperparameters, cv=10)
# #Fit the model
# best_model = clf.fit(X_train, y_train)
# #Print The value of best Hyperparameters
# print('Best leaf_size:', best_model.best_estimator_.get_params()['leaf_size'])
# print('Best p:', best_model.best_estimator_.get_params()['p'])
# print('Best n_neighbors:', best_model.best_estimator_.get_params()['n_neighbors'])

# from sklearn.metrics import classification_report
# from sklearn.metrics import roc_auc_score

# knn = KNeighborsClassifier(n_neighbors = best_model.best_estimator_.get_params()['n_neighbors'],
#                            p = best_model.best_estimator_.get_params()['p'],
#                            leaf_size = best_model.best_estimator_.get_params()['leaf_size'])
# knn.fit(X_train, y_train)
# #Predict test data set.
# y_pred = knn.predict(X_test)
# #Checking performance our model with classification report.
# print(classification_report(y_test, y_pred))

# roc_auc_score(y_test, y_pred)

"""DECISION TREE MODEL"""

from sklearn.tree import DecisionTreeClassifier

clf = DecisionTreeClassifier()

clf = clf.fit(X_train,y_train)

y_pred = clf.predict(X_test)

print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

clf = DecisionTreeClassifier(criterion="entropy", max_depth=5)

clf = clf.fit(X_train,y_train) 

y_pred = clf.predict(X_test)

print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

clf = DecisionTreeClassifier(criterion="gini", max_depth=5)

clf = clf.fit(X_train,y_train) 

y_pred = clf.predict(X_test)

print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

from six import StringIO
from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus
dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True, feature_names = X_train.columns, class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('diabetes.png')
Image(graph.create_png())

dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True, feature_names = X_train.columns,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('diabetes.png')
Image(graph.create_png())

"""RANDOM FOREST"""

from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier(n_estimators = 100) 

clf.fit(X_train, y_train)
 
y_pred = clf.predict(X_test)

print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

# clf = RandomForestClassifier(n_estimators = 200) 

# clf.fit(X_train, y_train)
 
# y_pred = clf.predict(X_test)

# print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
# print("Precision:",metrics.precision_score(y_test, y_pred))
# print("Recall:",metrics.recall_score(y_test, y_pred))

# clf = RandomForestClassifier(n_estimators = 50) 

# clf.fit(X_train, y_train)
 
# y_pred = clf.predict(X_test)

# print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
# print("Precision:",metrics.precision_score(y_test, y_pred))
# print("Recall:",metrics.recall_score(y_test, y_pred))

# clf = RandomForestClassifier(n_estimators = 500) 

# clf.fit(X_train, y_train)
 
# y_pred = clf.predict(X_test)

# print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
# print("Precision:",metrics.precision_score(y_test, y_pred))
# print("Recall:",metrics.recall_score(y_test, y_pred))

"""SVM"""

# from sklearn import svm

# clf = svm.SVC(kernel='linear')

# clf.fit(X_train, y_train)

# y_pred = clf.predict(X_test)

# print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
# print("Precision:",metrics.precision_score(y_test, y_pred))
# print("Recall:",metrics.recall_score(y_test, y_pred))

# from sklearn import svm

# clf = svm.SVC(kernel='poly')

# clf.fit(X_train, y_train)

# y_pred = clf.predict(X_test)

# print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
# print("Precision:",metrics.precision_score(y_test, y_pred))
# print("Recall:",metrics.recall_score(y_test, y_pred))

# from sklearn import svm

# clf = svm.SVC(kernel='rbf')

# clf.fit(X_train, y_train)

# y_pred = clf.predict(X_test)

# print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
# print("Precision:",metrics.precision_score(y_test, y_pred))
# print("Recall:",metrics.recall_score(y_test, y_pred))

# from sklearn import svm

# clf = svm.SVC(kernel='sigmoid')

# clf.fit(X_train, y_train)

# y_pred = clf.predict(X_test)

# print("Accuracy: ", metrics.accuracy_score(y_test, y_pred))
# print("Precision:",metrics.precision_score(y_test, y_pred))
# print("Recall:",metrics.recall_score(y_test, y_pred))

"""VOTING CLASSIFIER"""

# from sklearn import svm

# SVC_model = svm.SVC()

# KNN_model = KNeighborsClassifier(n_neighbors=5)
# SVC_model.fit(X_train, y_train)
# KNN_model.fit(X_train, y_train)

# SVC_prediction = SVC_model.predict(X_test)
# KNN_prediction = KNN_model.predict(X_test)

# print(accuracy_score(SVC_prediction, y_test))
# print(accuracy_score(KNN_prediction, y_test))

# print(confusion_matrix(SVC_prediction, y_test))
# print(classification_report(KNN_prediction, y_test))

"""MLP CLASSIFIER"""

# from sklearn.neural_network import MLPClassifier

# mlp = MLPClassifier(hidden_layer_sizes=(300,300,50), activation='relu', solver='adam', max_iter=500)
# mlp.fit(X_train,y_train)

# predict_train = mlp.predict(X_train)
# predict_test = mlp.predict(X_test)

# from sklearn.metrics import classification_report,confusion_matrix

# print(accuracy_score(y_test,predict_test))